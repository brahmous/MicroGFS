syntax = "proto3";

package GFSChunkServer;

enum Status {
  SUCCESS = 0;
  ERROR = 1;
}

message Error {
  int32 error_code = 1;
  string error_message = 2;
}

message ChunkMetadata {
  uint64 handle = 1;
  uint32 chunk_size = 2;
}

message UploadChunkMetadataRequest {}
// message UploadChunkMetadataResponse {}

message HeartBeatRequest {}

message HeartBeatResponse {
  bool extend_lease = 1;
}

message RpcServerIdentifier {
  string ip = 1;
  uint32 rpc_port = 2;
}

message TcpRpcServerIdentifier {
  string ip = 1;
  uint32 tcp_port = 2;
  uint32 rpc_port = 3;
}

message SecondaryAndForwardServerInfo {
  uint32 handle = 1;
  TcpRpcServerIdentifier server_info = 2;
  TcpRpcServerIdentifier forward_to = 3;
  bool forward = 4;
}

message AssignPrimaryRequest {
  RpcServerIdentifier client_server = 1;
  uint32 write_id = 2;
  uint32 write_size = 3;
  uint64 handle = 4;
  uint64 offset = 5;
  TcpRpcServerIdentifier forward_to = 6;
  repeated SecondaryAndForwardServerInfo secondary_servers = 7;
}

message AssignPrimaryResponseBody {
  bool acknowledgment = 2;
}

message AssignPrimaryResponse {
  Status status = 1;
  AssignPrimaryResponseBody body = 2;
  Error error = 3;
}

message AssignSecondaryRequest {
  uint64 handle = 1;
  RpcServerIdentifier client_server = 2;
  TcpRpcServerIdentifier forward_server = 3;
  int32 write_id = 4;
  int32 write_size = 5;
  bool forward = 6;
}

message AssignSecondaryResponseBody {
  bool acknowledgment = 1;
}

message AssignSecondaryResponse {
  Status status = 1;
  AssignSecondaryResponseBody body = 2;
  Error error = 3;
}

message FlushResponseBody {
  bool acknowledgement = 1;
}

message FlushRequest {
  int32 write_id = 1;
}

message FlushResponse {
  Status status = 1;
  FlushResponseBody body = 2;
  Error error = 3;
}

service ChunkServerService {
  rpc UploadChunkMetadata(UploadChunkMetadataRequest) returns (stream ChunkMetadata) {}
  rpc HeartBeat(HeartBeatRequest) returns (HeartBeatResponse) {}
  rpc AssignPrimary(AssignPrimaryRequest) returns (AssignPrimaryResponse) {}
  rpc AssignSecondary(AssignSecondaryRequest) returns (AssignSecondaryResponse) {}
  rpc Flush(FlushRequest) returns (FlushResponse) {}
}

// bug in lsp when you add semicolon after } and save it breaks.
